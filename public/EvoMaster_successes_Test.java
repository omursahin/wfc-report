/**
* LICENSE DISCLAIMER
* This file has been generated by EvoMaster.
* The content of this file is not subject to the license of EvoMaster itself, i.e., LGPL.
* This generated software (i.e., the test suite in this file) can be freely used, modified, 
* and distributed as you see fit without any restrictions.
*/
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-04-09T21:31:54.243+02:00[Europe/Berlin]
 * <br>
*  The generated test suite contains 17 tests
 * <br>
*  Covered targets: 340
 * <br>
*  Used time: 0h 1m 10s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.com.pfa.app.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ASSIGNMENTS","DEPARTMENTS","EMPLOYEES","LOCATIONS","PROJECTS","USER_CREDENTIALS","assignments","employees","user_credentials"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/app/v2/api-docs
    */
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/app/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/
    */
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/projects/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(9))
                .body("'collection'[0].'projectId'", numberMatches(1.0))
                .body("'collection'[0].'title'", containsString("TRANSBSCS"))
                .body("'collection'[0].'startDate'", containsString("28-09-2020"))
                .body("'collection'[0].'endDate'", containsString("04-11-2020"))
                .body("'collection'[0].'status'", containsString("COMPLETED"))
                .body("'collection'[1].'projectId'", numberMatches(2.0))
                .body("'collection'[1].'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'collection'[1].'startDate'", containsString("26-11-2020"))
                .body("'collection'[1].'endDate'", containsString("25-03-2021"))
                .body("'collection'[1].'status'", containsString("IN_PROGRESS"))
                .body("'collection'[2].'projectId'", numberMatches(3.0))
                .body("'collection'[2].'title'", containsString("TASYI9A LILVIRANDA"))
                .body("'collection'[2].'startDate'", containsString("26-11-2020"))
                .body("'collection'[2].'endDate'", containsString("26-11-2020"))
                .body("'collection'[2].'status'", containsString("COMPLETED"))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(2))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_3() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("LOCATIONS", 132L)
                .d("ADR", "\"SRMAyukXg0HOu\"")
                .d("POSTAL_CODE", "\"Eb\"")
                .d("CITY", "\"g6mwaokX1VPcWa\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/locations?" + 
                    "password=z&" + 
                    "username=QIzP_Pi6uBD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"))
                .body("'collection'[2].'locationId'", numberMatches(3.0))
                .body("'collection'[2].'adr'", containsString("SRMAyukXg0HOu"))
                .body("'collection'[2].'postalCode'", containsString("Eb"))
                .body("'collection'[2].'city'", containsString("g6mwaokX1VPcWa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments
    */
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/app/api/departments")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/departments/
    */
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/app/api/departments/?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'departmentId'", numberMatches(4.0))
                .body("'collection'[0].'departmentName'", containsString("DWH"))
                .body("'collection'[0].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[0].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[0].'location'.'city'", containsString("LAC2"))
                .body("'collection'[1].'departmentId'", numberMatches(5.0))
                .body("'collection'[1].'departmentName'", containsString("Digital"))
                .body("'collection'[1].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[1].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[1].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[1].'location'.'city'", containsString("LAC2"))
                .body("'collection'[2].'departmentId'", numberMatches(6.0))
                .body("'collection'[2].'departmentName'", containsString("Billing"))
                .body("'collection'[2].'location'.'locationId'", numberMatches(1.0))
                .body("'collection'[2].'location'.'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[2].'location'.'postalCode'", containsString("2016"))
                .body("'collection'[2].'location'.'city'", containsString("LAC2"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/employees/delete/{id}
    */
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/app/api/employees/delete/1?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/credentials/username/{username}
    */
    @Test @Timeout(60)
    public void test_7() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/credentials/username/NCv5HanSYi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/app/api/employees/username/{username}
    */
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .delete(baseUrlOfSut + "/app/api/employees/username/admin")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("true"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/credentials/
    */
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .get(baseUrlOfSut + "/app/api/credentials/")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(14))
                .body("'collection'[0].'credentialId'", numberMatches(1.0))
                .body("'collection'[0].'username'", containsString("imentouk"))
                .body("'collection'[0].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[0].'enabled'", equalTo(true))
                .body("'collection'[0].'role'", containsString("ROLE_EMP"))
                .body("'collection'[1].'credentialId'", numberMatches(2.0))
                .body("'collection'[1].'username'", containsString("badridoudi"))
                .body("'collection'[1].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[1].'enabled'", equalTo(true))
                .body("'collection'[1].'role'", containsString("ROLE_EMP"))
                .body("'collection'[2].'credentialId'", numberMatches(3.0))
                .body("'collection'[2].'username'", containsString("selimhorri"))
                .body("'collection'[2].'password'", containsString("$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2"))
                .body("'collection'[2].'enabled'", equalTo(true))
                .body("'collection'[2].'role'", containsString("ROLE_EMP"))
                ; // Skipping assertions on the remaining 11 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/projects/{id}
    */
    @Test @Timeout(60)
    public void test_11() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .get(baseUrlOfSut + "/app/api/projects/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'projectId'", numberMatches(2.0))
                .body("'title'", containsString("SYNCH_BSCS_IMX"))
                .body("'startDate'", containsString("26-11-2020"))
                .body("'endDate'", containsString("25-03-2021"))
                .body("'status'", containsString("IN_PROGRESS"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/app/api/locations/
    */
    @Test @Timeout(60)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("DEPARTMENTS", 172L)
                .d("DEPARTMENT_NAME", "\"cpnXGmm\"")
            .and().insertInto("EMPLOYEES", 171L)
                .d("FIRST_NAME", "\"OuUVfBi\"")
                .d("LAST_NAME", "\"3BpLkuXewP\"")
                .d("EMAIL", "\"kmq@XOy.xaOW\"")
                .d("PHONE", "\"KqYqq6yxQGHPhJ\"")
                .d("JOB", "\"P_PF\"")
                .d("SALARY", "0.6355311891588135")
            .and().insertInto("DEPARTMENTS", 169L)
                .d("DEPARTMENT_NAME", "\"r\"")
            .and().insertInto("EMPLOYEES", 168L)
                .d("FIRST_NAME", "\"v9P3zZgDobCgg\"")
                .d("LAST_NAME", "\"3ZaAsO46b5p9ZWm\"")
                .d("EMAIL", "\"IngZ@W.wW\"")
                .d("PHONE", "\"OxFfX5XkXQrRoWV\"")
                .d("JOB", "\"4qox3baWf3tp\"")
                .d("SALARY", "0.4890975015973792")
            .and().insertInto("LOCATIONS", 167L)
                .d("ADR", "\"SeExk2L\"")
                .d("POSTAL_CODE", "\"bENRo6FTuZxueSZO\"")
                .d("CITY", "\"oD4qBBKgR76wmt\"")
            .and().insertInto("DEPARTMENTS", 166L)
                .d("DEPARTMENT_NAME", "\"QuN9\"")
            .and().insertInto("EMPLOYEES", 165L)
                .d("FIRST_NAME", "\"oHM1Ef\"")
                .d("LAST_NAME", "\"F0aW24AQ3s\"")
                .d("EMAIL", "\"FF@AU.ReBT\"")
                .d("PHONE", "\"ehJiZp4n\"")
                .d("JOB", "\"8cbnJvl_kTGAyME9\"")
                .d("SALARY", "0.042795373541171244")
            .and().insertInto("ASSIGNMENTS", 164L)
                .d("EMPLOYEE_ID", "13")
                .d("PROJECT_ID", "7")
                .d("COMMIT_DATE", "\"1965-05-04 06:17:30\"")
                .d("COMMIT_EMP_DESC", "\"oM\"")
                .d("COMMIT_MGR_DESC", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        final Map<String,String> cookies_ROLE_EMP = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=selimhorri&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_EMP)
                .get(baseUrlOfSut + "/app/api/locations/?" + 
                    "password=U73MT5RTL_bxNmX&" + 
                    "username=4e1s3IUcM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'collection'.size()", equalTo(3))
                .body("'collection'[0].'locationId'", numberMatches(1.0))
                .body("'collection'[0].'adr'", containsString("RUE DE LA BOURSE"))
                .body("'collection'[0].'postalCode'", containsString("2016"))
                .body("'collection'[0].'city'", containsString("LAC2"))
                .body("'collection'[1].'locationId'", numberMatches(2.0))
                .body("'collection'[1].'adr'", containsString("RUE DE BLA BLA"))
                .body("'collection'[1].'postalCode'", containsString("2016"))
                .body("'collection'[1].'city'", containsString("CHARGUIA"))
                .body("'collection'[2].'locationId'", numberMatches(3.0))
                .body("'collection'[2].'adr'", containsString("SeExk2L"))
                .body("'collection'[2].'postalCode'", containsString("bENRo6FTuZxueSZO"))
                .body("'collection'[2].'city'", containsString("oD4qBBKgR76wmt"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/locations
    */
    @Test @Timeout(60)
    public void test_13() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"V4ANdj_0Yja01Ka\", " + 
                    " \"city\": \"Ok3kQXdJOldgGJ\", " + 
                    " \"postalCode\": \"sfSsn\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/locations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(3.0))
                .body("'adr'", containsString("V4ANdj_0Yja01Ka"))
                .body("'postalCode'", containsString("sfSsn"))
                .body("'city'", containsString("Ok3kQXdJOldgGJ"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/app/api/locations/save
    */
    @Test @Timeout(60)
    public void test_14() throws Exception {
        
        final Map<String,String> cookies_ROLE_MGR = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=soumayahajjem&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_MGR)
                .contentType("application/json")
                .body(" { " + 
                    " \"adr\": \"Y8fQj\", " + 
                    " \"city\": \"JhBmar\", " + 
                    " \"locationId\": 10106611, " + 
                    " \"postalCode\": \"MHZa\" " + 
                    " } ")
                .post(baseUrlOfSut + "/app/api/locations/save")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'locationId'", numberMatches(4.0))
                .body("'adr'", containsString("Y8fQj"))
                .body("'postalCode'", containsString("MHZa"))
                .body("'city'", containsString("JhBmar"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/credentials
    */
    @Test @Timeout(60)
    public void test_15() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"credentialId\": 516, " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"$2a$10$6pNV34gbMAEj6vuyVmQMdOfSKk.kuxOUOeucg78/cvOprSR3lsZL2\", " + 
                    " \"role\": \"cQOySXQt0Ew\", " + 
                    " \"username\": \"NCv5HanSYi\" " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/credentials")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'credentialId'", numberMatches(15.0))
                .body("'username'", containsString("NCv5HanSYi"))
                .body("'password'", containsString("$2a$10$FrNH3z7hZ3eExguIz90fL.u0cjP.xKwqJxtpr7Au7kKu453LvE9GS"))
                .body("'enabled'", equalTo(false))
                .body("'role'", containsString("cQOySXQt0Ew"));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/app/api/departments/update
    */
    @Test @Timeout(60)
    public void test_16() throws Exception {
        
        final Map<String,String> cookies_ROLE_ADMIN = given()
            .contentType("application/x-www-form-urlencoded")
            .body("username=admin&password=test")
            .post(baseUrlOfSut + "/app/login")
            .then().extract().cookies();
            
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .cookies(cookies_ROLE_ADMIN)
                .contentType("application/json")
                .body(" { " + 
                    " \"departmentId\": -793207560, " + 
                    " \"departmentName\": \"hWf4qKIK5\", " + 
                    " \"location\": { " + 
                    " \"adr\": \"YBmBONGS_lC3od\", " + 
                    " \"city\": \"_EM_675_XYZ_\", " + 
                    " \"locationId\": 2 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/app/api/departments/update")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'departmentId'", numberMatches(3.0))
                .body("'departmentName'", containsString("hWf4qKIK5"))
                .body("'location'.'locationId'", numberMatches(2.0))
                .body("'location'.'adr'", containsString("RUE DE BLA BLA"))
                .body("'location'.'postalCode'", containsString("2016"))
                .body("'location'.'city'", containsString("CHARGUIA"));
    }


}
